print("end form")
(pi_(i,s,Q-i+s) - log(g.old(i-s)))
}
# Integrate in two parts. When demand <= i, and when demand >i
first(integrate(function(s) form(i,s) * dlnorm(s,meanlog = theta1[1],sdlog = theta1[2]),0,i)) +
first(integrate(function(s) form(i,i) * dlnorm(s,meanlog = theta1[1],sdlog = theta1[2]),i,Inf))
}
f_hat(theta1, c(3,.3,4),g.old)
PMLE <- function(theta2,data){
print(theta2)
log((data$q > 0) * g(data$i - data$s, theta2 = theta2,
f.old = f_hat(theta1 = theta1, theta2 = theta2, g.old =  g.old))  +
(data$q == 0) * (1 - g(data$i - data$s, theta2 = theta2,
f.old = f_hat(theta1 = theta1, theta2 = theta2, g.old =  g.old)))) %>%
sum
}
results <- optim(c(3,.3,4), PMLE,
data = data,
method = 'L-BFGS-B', lower = c(0.01,0.01,0.01),
control = list(fnscale = -1) # maximization option
)
plot(CCP$prob_order)
chebknots(dims = dims,intervals = c(0,Q))
first(chebknots(dims = dims,intervals = c(0,Q)))
initialCCPs<- function(data){
regData <- data.frame(replace = 1 * (data$q > 0),
key = data$i - data$s)
results <- npreg(replace ~ key, data = regData)
newdata <- data.frame(key = first(chebknots(dims = dims,intervals = c(0,Q))))
output <- data.frame(key = newdata$key,
prob_order = predict(results,newdata = newdata))
}
#This will mostly be taken out of the function and sourced in a separate file.
estimatePrimitives <- function(){
#   par <- data.frame(mu = 0,
#                    sigma = 0,
#                    pr = 3,
#                    alpha = .3,
#                    eta = 4)
theta1 <- rep(0,2)
# Repeat until the optimization doesn't throw an error because of bad initial values
repeat{
temp <- try(estimateLogNormal(), silent = TRUE)
# Check if bad initial values, if not break
if (!('try-error' %in% class(temp))){
break
}
}
theta1[1] <- temp[1]
theta1[2] <- temp[2]
CCP <- initialCCPs(data)
g.old <- chebappxf(g.init,dims = dims,intervals = c(0,Q), CCP = CCP) %>%
Vectorize
f_hat <- function(theta1, theta2, g.old){
print(theta1)
chebappxf(f,dims = dims,intervals = c(0,Q), theta1 = theta1, theta2 = theta2, g.old =  g.old) %>%
Vectorize
print("end f")
chebappxf(f,dims = dims,intervals = c(0,Q), theta1 = theta1, theta2 = theta2, g.old =  g.old) %>%
Vectorize
}
f_hat(theta1, c(3,.3,4),g.old)
}
initialCCPs<- function(data){
regData <- data.frame(replace = 1 * (data$q > 0),
key = data$i - data$s)
results <- npreg(replace ~ key, data = regData)
newdata <- data.frame(key = first(chebknots(dims = dims,intervals = c(0,Q))))
output <- data.frame(key = newdata$key,
prob_order = predict(results,newdata = newdata))
}
theta1 <- rep(0,2)
# Repeat until the optimization doesn't throw an error because of bad initial values
repeat{
temp <- try(estimateLogNormal(), silent = TRUE)
# Check if bad initial values, if not break
if (!('try-error' %in% class(temp))){
break
}
}
theta1[1] <- temp[1]
theta1[2] <- temp[2]
CCP <- initialCCPs(data)
g.old <- chebappxf(g.init,dims = dims,intervals = c(0,Q), CCP = CCP) %>%
Vectorize
f_hat(theta1, c(3,.3,4),g.old)
View(CCP)
log(0)
log(-1)
log(10^-100)
log(10^-1)
10^-100
10^-300
10^-400
10^-324
10^-300
log(10^-400)
log(10^-300)
g.init <- function(key, CCP){
if(CCP$prob_order[CCP$key == key]>0){
CCP$prob_order[CCP$key == key]>0
} else {
10^-300
}
}
theta1 <- rep(0,2)
# Repeat until the optimization doesn't throw an error because of bad initial values
repeat{
temp <- try(estimateLogNormal(), silent = TRUE)
# Check if bad initial values, if not break
if (!('try-error' %in% class(temp))){
break
}
}
theta1[1] <- temp[1]
theta1[2] <- temp[2]
CCP <- initialCCPs(data)
g.old <- chebappxf(g.init,dims = dims,intervals = c(0,Q), CCP = CCP) %>%
Vectorize
g.init <- function(key, CCP){
CCP$prob_order[CCP$key == key]>0
}
theta1 <- rep(0,2)
# Repeat until the optimization doesn't throw an error because of bad initial values
repeat{
temp <- try(estimateLogNormal(), silent = TRUE)
# Check if bad initial values, if not break
if (!('try-error' %in% class(temp))){
break
}
}
theta1[1] <- temp[1]
theta1[2] <- temp[2]
CCP <- initialCCPs(data)
g.old <- chebappxf(g.init,dims = dims,intervals = c(0,Q), CCP = CCP) %>%
Vectorize
g.init <- function(key, CCP){
CCP$prob_order[CCP$key == key]
}
theta1 <- rep(0,2)
# Repeat until the optimization doesn't throw an error because of bad initial values
repeat{
temp <- try(estimateLogNormal(), silent = TRUE)
# Check if bad initial values, if not break
if (!('try-error' %in% class(temp))){
break
}
}
theta1[1] <- temp[1]
theta1[2] <- temp[2]
CCP <- initialCCPs(data)
g.old <- chebappxf(g.init,dims = dims,intervals = c(0,Q), CCP = CCP) %>%
Vectorize
g.old
g.init <- function(key, CCP){
if(CCP$prob_order[CCP$key == key]>0){
CCP$prob_order[CCP$key == key]
} else {
10^-30
}
}
theta1 <- rep(0,2)
# Repeat until the optimization doesn't throw an error because of bad initial values
repeat{
temp <- try(estimateLogNormal(), silent = TRUE)
# Check if bad initial values, if not break
if (!('try-error' %in% class(temp))){
break
}
}
theta1[1] <- temp[1]
theta1[2] <- temp[2]
CCP <- initialCCPs(data)
g.old <- chebappxf(g.init,dims = dims,intervals = c(0,Q), CCP = CCP) %>%
Vectorize
f_hat(theta1, c(3,.3,4),g.old)
i
g.old(0.1299093)
g.old(9.8273150)
g.init <- function(key, CCP){
CCP$prob_order[CCP$key == key]
}
theta1 <- rep(0,2)
# Repeat until the optimization doesn't throw an error because of bad initial values
repeat{
temp <- try(estimateLogNormal(), silent = TRUE)
# Check if bad initial values, if not break
if (!('try-error' %in% class(temp))){
break
}
}
theta1[1] <- temp[1]
theta1[2] <- temp[2]
CCP <- initialCCPs(data)
g.old <- chebappxf(g.init,dims = dims,intervals = c(0,Q), CCP = CCP) %>%
Vectorize
?chebappxf
g.old <- max(chebappxf(g.init,dims = dims,intervals = c(0,Q), CCP = CCP),10^-300) %>%
Vectorize
g.old <- chebappxf(max(g.init,10^-300),dims = dims,intervals = c(0,Q), CCP = CCP) %>%
Vectorize
f_hat(theta1, c(3,.3,4),g.old)
f_hat <- function(){
print(theta1)
chebappxf(f,dims = dims,intervals = c(0,Q), theta1 = theta1, theta2 = theta2, g.old =  g.old) %>%
Vectorize
print("end f")
chebappxf(f,dims = dims,intervals = c(0,Q), theta1 = theta1, theta2 = theta2, g.old =  g.old) %>%
Vectorize
}
f_hat(theta1, c(3,.3,4),g.old)
f_hat(
)
log(max(0,1))
log(max(0,2))
f <- function(i, theta1, theta2, g.old){
pi_<- function(i, s, q){
print("in pi")
theta2[1]*s - pw*q - theta2[2]*(i - s) - theta2[3]*(q>0)
}
form<- function(i,s){
print("in form")
print("i")
print(i)
print("s")
print(s)
test = i -s
print("test")
print(test)
print(g.old(i-s))
(pi_(i,s,Q-i+s) - log(max(g.old(i-s),10^-300)))
print("end form")
(pi_(i,s,Q-i+s) - log(max(g.old(i-s),10^-300)))
}
# Integrate in two parts. When demand <= i, and when demand >i
first(integrate(function(s) form(i,s) * dlnorm(s,meanlog = theta1[1],sdlog = theta1[2]),0,i)) +
first(integrate(function(s) form(i,i) * dlnorm(s,meanlog = theta1[1],sdlog = theta1[2]),i,Inf))
}
f_hat <- function(theta1, theta2, g.old){
print(theta1)
chebappxf(f,dims = dims,intervals = c(0,Q), theta1 = theta1, theta2 = theta2, g.old =  g.old) %>%
Vectorize
print("end f")
chebappxf(f,dims = dims,intervals = c(0,Q), theta1 = theta1, theta2 = theta2, g.old =  g.old) %>%
Vectorize
}
f_hat(theta1, c(3,.3,4),g.old)
PMLE <- function(theta2,data){
print(theta2)
log((data$q > 0) * g(data$i - data$s, theta2 = theta2,
f.old = f_hat(theta1 = theta1, theta2 = theta2, g.old =  g.old))  +
(data$q == 0) * (1 - g(data$i - data$s, theta2 = theta2,
f.old = f_hat(theta1 = theta1, theta2 = theta2, g.old =  g.old)))) %>%
sum
}
results <- optim(c(3,.3,4), PMLE,
data = data,
method = 'L-BFGS-B', lower = c(0.01,0.01,0.01),
control = list(fnscale = -1) # maximization option
)
g.init <- function(key, CCP){
CCP$prob_order[CCP$key == key]
}
# Relies on g.old, and therefore each time g.old/CCPs are updated,
# this is updated when a new chebappxf is called.
f <- function(i, theta1, theta2, g.old){
pi_<- function(i, s, q){
theta2[1]*s - pw*q - theta2[2]*(i - s) - theta2[3]*(q>0)
}
form<- function(i,s){
#print("in form")
#print("i")
#print(i)
#print("s")
#print(s)
#test = i -s
#print("test")
#print(test)
#print(g.old(i-s))
(pi_(i,s,Q-i+s) - log(max(g.old(i-s),10^-300)))
}
# Integrate in two parts. When demand <= i, and when demand >i
first(integrate(function(s) form(i,s) * dlnorm(s,meanlog = theta1[1],sdlog = theta1[2]),0,i)) +
first(integrate(function(s) form(i,i) * dlnorm(s,meanlog = theta1[1],sdlog = theta1[2]),i,Inf))
}
g <- function(x, theta2, f.old){
1/(1 + exp(pw*(Q- x) + theta2[3] + beta*(f.old(x) - f.old(Q))))
}
CCP <- initialCCPs(data)
g.old <- chebappxf(g.init,dims = dims,intervals = c(0,Q), CCP = CCP) %>%
Vectorize
f_hat <- function(theta1, theta2, g.old){
chebappxf(f,dims = dims,intervals = c(0,Q), theta1 = theta1, theta2 = theta2, g.old =  g.old) %>%
Vectorize
}
# Pseudo-Maximum Likelihood, doesn't yet work
PMLE <- function(theta2,data){
print(theta2)
log((data$q > 0) * g(data$i - data$s, theta2 = theta2,
f.old = f_hat(theta1 = theta1, theta2 = theta2, g.old =  g.old))  +
(data$q == 0) * (1 - g(data$i - data$s, theta2 = theta2,
f.old = f_hat(theta1 = theta1, theta2 = theta2, g.old =  g.old)))) %>%
sum
}
results <- optim(c(3,.3,4), PMLE,
data = data,
method = 'L-BFGS-B', lower = c(0.01,0.01,0.01),
control = list(fnscale = -1) # maximization option
)
results <- optim(c(3,.3,4), PMLE,
data = data,
method = 'L-BFGS-B', lower = c(0.01,0.01,0.01),
control = list(fnscale = -1) # maximization option
)
f <- function(i, theta1, theta2, g.old){
pi_<- function(i, s, q){
theta2[1]*s - pw*q - theta2[2]*(i - s) - theta2[3]*(q>0)
}
form<- function(i,s){
#print("in form")
print("i")
print(i)
print("s")
print(s)
#test = i -s
#print("test")
#print(test)
#print(g.old(i-s))
(pi_(i,s,Q-i+s) - log(max(g.old(i-s),10^-300)))
}
# Integrate in two parts. When demand <= i, and when demand >i
first(integrate(function(s) form(i,s) * dlnorm(s,meanlog = theta1[1],sdlog = theta1[2]),0,i)) +
first(integrate(function(s) form(i,i) * dlnorm(s,meanlog = theta1[1],sdlog = theta1[2]),i,Inf))
}
f_hat <- function(theta1, theta2, g.old){
chebappxf(f,dims = dims,intervals = c(0,Q), theta1 = theta1, theta2 = theta2, g.old =  g.old) %>%
Vectorize
}
# Pseudo-Maximum Likelihood, doesn't yet work
PMLE <- function(theta2,data){
print(theta2)
log((data$q > 0) * g(data$i - data$s, theta2 = theta2,
f.old = f_hat(theta1 = theta1, theta2 = theta2, g.old =  g.old))  +
(data$q == 0) * (1 - g(data$i - data$s, theta2 = theta2,
f.old = f_hat(theta1 = theta1, theta2 = theta2, g.old =  g.old)))) %>%
sum
}
results <- optim(c(3,.3,4), PMLE,
data = data,
method = 'L-BFGS-B', lower = c(0.01,0.01,0.01),
control = list(fnscale = -1) # maximization option
)
source('header.R')
Q = 10
pw = 1
beta = .95
N = 1000
dims = 12
gamma <- -digamma(1)
# Simulate data
data <- simdata(S = N)
?integrate
theta1 <- rep(0,2)
# Repeat until the optimization doesn't throw an error because of bad initial values
repeat{
temp <- try(estimateLogNormal(), silent = TRUE)
# Check if bad initial values, if not break
if (!('try-error' %in% class(temp))){
break
}
}
theta1[1] <- temp[1]
theta1[2] <- temp[2]
CCP <- initialCCPs(data)
g.old <- chebappxf(g.init,dims = dims,intervals = c(0,Q), CCP = CCP) %>%
Vectorize
f_hat <- function(theta1, theta2, g.old){
chebappxf(f,dims = dims,intervals = c(0,Q), theta1 = theta1, theta2 = theta2, g.old =  g.old) %>%
Vectorize
}
# Pseudo-Maximum Likelihood, doesn't yet work
PMLE <- function(theta2,data){
print(theta2)
log((data$q > 0) * g(data$i - data$s, theta2 = theta2,
f.old = f_hat(theta1 = theta1, theta2 = theta2, g.old =  g.old))  +
(data$q == 0) * (1 - g(data$i - data$s, theta2 = theta2,
f.old = f_hat(theta1 = theta1, theta2 = theta2, g.old =  g.old)))) %>%
sum
}
results <- optim(c(3,.3,4), PMLE,
data = data,
method = 'L-BFGS-B', lower = c(0.01,0.01,0.01),
control = list(fnscale = -1) # maximization option
)
f <- function(i, theta1, theta2, g.old){
pi_<- function(i, s, q){
theta2[1]*s - pw*q - theta2[2]*(i - s) - theta2[3]*(q>0)
}
form<- function(i,s){
#print("in form")
#print("i")
#print(i)
#print("s")
#print(s)
#test = i -s
#print("test")
#print(test)
#print(g.old(i-s))
(pi_(i,s,Q-i+s) - log(max(g.old(i-s),10^-300)))
}
# Integrate in two parts. When demand <= i, and when demand >i
first(integrate(function(s) form(i,s) * dlnorm(s,meanlog = theta1[1],sdlog = theta1[2]),0,i)) +
first(integrate(function(s) form(i,i) * dlnorm(s,meanlog = theta1[1],sdlog = theta1[2]),i,Inf))
}
theta1 <- rep(0,2)
# Repeat until the optimization doesn't throw an error because of bad initial values
repeat{
temp <- try(estimateLogNormal(), silent = TRUE)
# Check if bad initial values, if not break
if (!('try-error' %in% class(temp))){
break
}
}
theta1[1] <- temp[1]
theta1[2] <- temp[2]
CCP <- initialCCPs(data)
g.old <- chebappxf(g.init,dims = dims,intervals = c(0,Q), CCP = CCP) %>%
Vectorize
f_hat <- function(theta1, theta2, g.old){
chebappxf(f,dims = dims,intervals = c(0,Q), theta1 = theta1, theta2 = theta2, g.old =  g.old) %>%
Vectorize
}
# Pseudo-Maximum Likelihood, doesn't yet work
PMLE <- function(theta2,data){
print(theta2)
log((data$q > 0) * g(data$i - data$s, theta2 = theta2,
f.old = f_hat(theta1 = theta1, theta2 = theta2, g.old =  g.old))  +
(data$q == 0) * (1 - g(data$i - data$s, theta2 = theta2,
f.old = f_hat(theta1 = theta1, theta2 = theta2, g.old =  g.old)))) %>%
sum
}
results <- optim(c(3,.3,4), PMLE,
data = data,
method = 'L-BFGS-B', lower = c(0.01,0.01,0.01),
control = list(fnscale = -1) # maximization option
)
f_hat <- function(){
chebappxf(f,dims = dims,intervals = c(0,Q), theta1 = theta1, theta2 = theta2, g.old =  g.old) %>%
Vectorize
}
# Pseudo-Maximum Likelihood, doesn't yet work
PMLE <- function(theta2,data){
print(theta2)
log((data$q > 0) * g(data$i - data$s, theta2 = theta2,
f.old = f_hat())  +
(data$q == 0) * (1 - g(data$i - data$s, theta2 = theta2,
f.old = f_hat()))) %>%
sum
}
results <- optim(c(3,.3,4), PMLE,
data = data,
method = 'L-BFGS-B', lower = c(0.01,0.01,0.01),
control = list(fnscale = -1) # maximization option
)
f_hat <- function(theta1, theta2, g.old){
chebappxf(f,dims = dims,intervals = c(0,Q), theta1 = theta1, theta2 = theta2, g.old =  g.old) %>%
Vectorize
}
# Pseudo-Maximum Likelihood, doesn't yet work
PMLE <- function(theta2,data){
print(theta2)
log((data$q > 0) * g(data$i - data$s, theta2 = theta2,
f.old = f_hat(theta1 = theta1, theta2 = theta2, g.old =  g.old))  +
(data$q == 0) * (1 - g(data$i - data$s, theta2 = theta2,
f.old = f_hat(theta1 = theta1, theta2 = theta2, g.old =  g.old)))) %>%
sum
}
theta1<-c(1,1)
results <- optim(c(3,.3,4), PMLE,
data = data,
method = 'L-BFGS-B', lower = c(0.01,0.01,0.01),
control = list(fnscale = -1) # maximization option
)
PMLE <- function(theta2,data){
theta2 =cbind(theta2,4)
print(theta2)
log((data$q > 0) * g(data$i - data$s, theta2 = theta2,
f.old = f_hat(theta1 = theta1, theta2 = theta2, g.old =  g.old))  +
(data$q == 0) * (1 - g(data$i - data$s, theta2 = theta2,
f.old = f_hat(theta1 = theta1, theta2 = theta2, g.old =  g.old)))) %>%
sum
}
results <- optim(c(3,.3), PMLE,
data = data,
method = 'L-BFGS-B', lower = c(0.01,0.01,0.01),
control = list(fnscale = -1) # maximization option
)
# Pseudo-Maximum Likelihood, doesn't yet work
PMLE <- function(theta2,data){
theta2 =c(theta2[1],theta2[2],4)
print(theta2)
log((data$q > 0) * g(data$i - data$s, theta2 = theta2,
f.old = f_hat(theta1 = theta1, theta2 = theta2, g.old =  g.old))  +
(data$q == 0) * (1 - g(data$i - data$s, theta2 = theta2,
f.old = f_hat(theta1 = theta1, theta2 = theta2, g.old =  g.old)))) %>%
sum
}
results <- optim(c(3,.3), PMLE,
data = data,
method = 'L-BFGS-B', lower = c(0.01,0.01,0.01),
control = list(fnscale = -1) # maximization option
)
